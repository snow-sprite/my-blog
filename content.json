{"meta":{"title":"之欧舟 | Blog","subtitle":"随便写写，记录点滴","description":"之欧舟的个人博客，记录生活，记录点滴。","author":"zhiozhou","url":"https://snow-sprite.github.io"},"pages":[{"title":"❀❀心灵聆听","date":"2019-01-18T10:11:16.000Z","updated":"2019-02-18T10:18:28.551Z","comments":true,"path":"notes/index.html","permalink":"https://snow-sprite.github.io/notes/index.html","excerpt":"","text":"圆圆圈圈圆圆 圈圈圆圆圈圈的我"},{"title":"","date":"2019-12-08T11:22:14.334Z","updated":"2018-08-28T11:02:05.051Z","comments":true,"path":"html/CANVAS跟随鼠标的旋转光圈.html","permalink":"https://snow-sprite.github.io/html/CANVAS跟随鼠标的旋转光圈.html","excerpt":"","text":"var SCREEN_WIDTH = window.innerWidth; var SCREEN_HEIGHT = window.innerHeight; var RADIUS = 70; var RADIUS_SCALE = 1; var RADIUS_SCALE_MIN = 1; var RADIUS_SCALE_MAX = 1.5; var QUANTITY = 25; var canvas; var context; var particles; var mouseX = SCREEN_WIDTH * 0.5; var mouseY = SCREEN_HEIGHT * 0.5; var mouseIsDown = false; function init() { canvas = document.getElementById( 'world' ); if (canvas && canvas.getContext) { context = canvas.getContext('2d'); // Register event listeners window.addEventListener('mousemove', documentMouseMoveHandler, false); window.addEventListener('mousedown', documentMouseDownHandler, false); window.addEventListener('mouseup', documentMouseUpHandler, false); document.addEventListener('touchstart', documentTouchStartHandler, false); document.addEventListener('touchmove', documentTouchMoveHandler, false); window.addEventListener('resize', windowResizeHandler, false); createParticles(); windowResizeHandler(); setInterval( loop, 1000 / 60 ); } } function createParticles() { particles = []; for (var i = 0; i < QUANTITY; i++) { var particle = { size: 1, position: { x: mouseX, y: mouseY }, offset: { x: 0, y: 0 }, shift: { x: mouseX, y: mouseY }, speed: 0.01+Math.random()*0.04, targetSize: 1, fillColor: '#' + (Math.random() * 0x904040 + 0xaaaaaa | 0).toString(16), orbit: RADIUS*.5 + (RADIUS * .5 * Math.random()) }; particles.push( particle ); } } function documentMouseMoveHandler(event) { mouseX = event.clientX - (window.innerWidth - SCREEN_WIDTH) * .5; mouseY = event.clientY - (window.innerHeight - SCREEN_HEIGHT) * .5; } function documentMouseDownHandler(event) { mouseIsDown = true; } function documentMouseUpHandler(event) { mouseIsDown = false; } function documentTouchStartHandler(event) { if(event.touches.length == 1) { event.preventDefault(); mouseX = event.touches[0].pageX - (window.innerWidth - SCREEN_WIDTH) * .5;; mouseY = event.touches[0].pageY - (window.innerHeight - SCREEN_HEIGHT) * .5; } } function documentTouchMoveHandler(event) { if(event.touches.length == 1) { event.preventDefault(); mouseX = event.touches[0].pageX - (window.innerWidth - SCREEN_WIDTH) * .5;; mouseY = event.touches[0].pageY - (window.innerHeight - SCREEN_HEIGHT) * .5; } } function windowResizeHandler() { SCREEN_WIDTH = window.innerWidth; SCREEN_HEIGHT = window.innerHeight; canvas.width = SCREEN_WIDTH; canvas.height = SCREEN_HEIGHT; } function loop() { if( mouseIsDown ) { RADIUS_SCALE += ( RADIUS_SCALE_MAX - RADIUS_SCALE ) * (0.02); } else { RADIUS_SCALE -= ( RADIUS_SCALE - RADIUS_SCALE_MIN ) * (0.02); } RADIUS_SCALE = Math.min( RADIUS_SCALE, RADIUS_SCALE_MAX ); context.fillStyle = 'rgba(0,0,0,0.05)'; context.fillRect(0, 0, context.canvas.width, context.canvas.height); for (i = 0, len = particles.length; i < len; i++) { var particle = particles[i]; var lp = { x: particle.position.x, y: particle.position.y }; // Rotation particle.offset.x += particle.speed; particle.offset.y += particle.speed; // Follow mouse with some lag particle.shift.x += ( mouseX - particle.shift.x) * (particle.speed); particle.shift.y += ( mouseY - particle.shift.y) * (particle.speed); // Apply position particle.position.x = particle.shift.x + Math.cos(i + particle.offset.x) * (particle.orbit*RADIUS_SCALE); particle.position.y = particle.shift.y + Math.sin(i + particle.offset.y) * (particle.orbit*RADIUS_SCALE); // Limit to screen bounds particle.position.x = Math.max( Math.min( particle.position.x, SCREEN_WIDTH ), 0 ); particle.position.y = Math.max( Math.min( particle.position.y, SCREEN_HEIGHT ), 0 ); particle.size += ( particle.targetSize - particle.size ) * 0.01; if( Math.round( particle.size ) == Math.round( particle.targetSize ) ) { particle.targetSize = 1 + Math.random() * 2; } context.beginPath(); context.fillStyle = particle.fillColor; context.strokeStyle = particle.fillColor; context.lineWidth = particle.size; context.moveTo(lp.x, lp.y); context.lineTo(particle.position.x, particle.position.y); context.stroke(); context.arc(particle.position.x, particle.position.y, particle.size/2, 0, Math.PI*2, true); context.fill(); } } window.onload = init;"},{"title":"page","date":"2019-02-18T03:38:23.000Z","updated":"2019-02-18T10:18:28.551Z","comments":true,"path":"notes/note2.html","permalink":"https://snow-sprite.github.io/notes/note2.html","excerpt":"","text":"今天上午心情稍微有点不美丽"},{"title":"","date":"2019-12-08T11:22:30.375Z","updated":"2019-12-01T04:01:11.854Z","comments":true,"path":"html/CANVAS时钟.html","permalink":"https://snow-sprite.github.io/html/CANVAS时钟.html","excerpt":"","text":"No canvas, no particles var Clock = (function () { // private variables var canvas, // canvas element ctx, // canvas context bgGrad = true, // background gradient flag gradient, // gradient (background) height = 400, // canvas height key = { up: false, shift: false }, // key presses particles = [], // particle array particleColor = 'hsla(0, 0%, 100%, 0.3)', // particle color mouse = { x: 0, y: 0 }, // position of mouse / touch press = false, // pressed flag quiver = false, // quiver flag text, // the text to copy pixels from textSize = 140, // (initial) textsize valentine = false, // valentine-ify it for a bit? msgTime = 100, // time to show a message before returning to clock updateColor = true, // update color of gradient / particles with time? width = 800; // canvas width // Constants var FRAME_RATE = 20, // frames per second target MIN_WIDTH = 800, // minimum width of canvas MIN_HEIGHT = 400, // minimum height of canvas PARTICLE_NUM = 600, // (max) number of particles to generate RADIUS = Math.PI * 2; // radius of particle var defaultStyles = function () { textSize = 140; // particle color particleColor = 'hsla(0, 0%, 100%, 0.3)'; // color stops var gradientStops = { 0: '#333333', 0.5: '#222222' }; // create gradient setGradient(gradientStops); }; var draw = function (p) { ctx.fillStyle = particleColor; ctx.beginPath(); ctx.arc(p.x, p.y, p.size, 0, RADIUS, true); ctx.closePath(); ctx.fill(); }; var explode = function () { for (var i = 0, l = particles.length; i < l; i++) { var p = particles[i]; if (p.inText) { var ax = mouse.x - p.px, ay = mouse.y - p.py, angle = Math.atan2(ay, ax), polarity, C = Math.cos(angle), S = Math.sin(angle); // change polarity // attract particles if mouse pressed, repel if shift + mousedown polarity = (key.shift === true) ? -1 : 1; p.x += polarity * (Math.pow((C - 1), 2) - 1) + p.velocityX * p.delta; p.y += polarity * (Math.pow((S - 1), 2) - 1) + p.velocityY * p.delta; // set previous positions p.px = p.x; p.py = p.y; draw(p); } } }; var getTime = function (amPM) { var date = new Date(), hours = date.getHours(), timeOfDay = ''; // if (amPM) { // // hours = (hours > 12) ? hours -= 12 : hours; // hours = (hours == 12) ? 0 : hours; // } else { // hours = (hours == 12) ? 12 : hours; // hours = hours // } var minutes = pad(date.getMinutes()); var seconds = pad(date.getSeconds()); return { hours: hours, minutes: minutes, seconds: seconds, timeString: hours + \" : \" + minutes + \" : \" + seconds }; }; // animation loop var loop = function () { // clear out text ctx.clearRect(0, 0, width, height); var hours = new Date().getHours() var bool = (hours 0) { textSize = 180; text = '?'; msgTime--; } else { text = time.timeString; } // valentine-ify it by setting hue to pink setStyles(300); } else if (updateColor === true && bgGrad === true) { // changing color with time // @TODO: come up with something better, this is a hacky implementation var color = time.hours + time.minutes + time.seconds; setStyles(color); text = time.timeString; } else { defaultStyles(); text = time.timeString; } ctx.fillStyle = \"rgb(255, 255, 255)\"; ctx.textBaseline = \"middle\"; ctx.font = textSize + \"px 'Avenir', 'Helvetica Neue', 'Arial', 'sans-serif'\"; ctx.fillText(text, (width - ctx.measureText(text).width) * 0.5, height * 0.5); // copy pixels var imgData = ctx.getImageData(0, 0, width, height); // clear canvas, again ctx.clearRect(0, 0, width, height); if (bgGrad === true) { // draw gradient ctx.fillStyle = gradient; ctx.fillRect(0, 0, width, height); } if (press === false) { // reset particles for (var i = 0, l = particles.length; i < l; i++) { var p = particles[i]; p.inText = false; } particleText(imgData); } else { explode(); } FPS.update('fps'); }; var pad = function (number) { return ('0' + number).substr(-2); }; var particleText = function (imgData) { var pxls = []; for (var w = width; w > 0; w -= 6) { for (var h = 0; h < width; h += 6) { var index = (w + h * (width)) * 4; if (imgData.data[index] > 10) { pxls.push([w, h]); } } } var count = pxls.length; for (var i = 0; i < pxls.length && i < particles.length; i++) { try { var p = particles[i], X, Y; if (quiver) { X = (pxls[count - 1][0]) - (p.px + Math.random() * 5); Y = (pxls[count - 1][1]) - (p.py + Math.random() * 5); } else { X = (pxls[count - 1][0]) - p.px; Y = (pxls[count - 1][1]) - p.py; } // tangent var T = Math.sqrt(X * X + Y * Y); // arctangent var A = Math.atan2(Y, X); // cosine var C = Math.cos(A); // sine var S = Math.sin(A); // set new postition p.x = p.px + C * T * p.delta; p.y = p.py + S * T * p.delta; // set previous positions p.px = p.x; p.py = p.y; p.inText = true; // draw the particle draw(p); if (key.up === true) { p.size += 0.3; } else { var newSize = p.size - 0.5; if (newSize > p.origSize && newSize > 0) { p.size = newSize; } else { p.size = m.origSize; } } } catch (e) { //console.log(e); } count--; } }; var setCoordinates = function (e) { if (e.offsetX) { return { x: e.offsetX, y: e.offsetY }; // use offset if available } else if (e.layerX) { return { x: e.layerX, y: e.layerY }; // firefox... make sure to position the canvas } else { // iOS. Maybe others too? return { x: e.pageX - canvas.offsetLeft, y: e.pageY - canvas.offsetTop }; } }; // set dimensions of canvas var setDimensions = function () { width = Math.max(window.innerWidth, MIN_WIDTH); height = Math.max(window.innerHeight, MIN_HEIGHT); // Resize the canvas canvas.width = width; canvas.height = height; canvas.style.position = 'absolute'; canvas.style.left = '0px'; canvas.style.top = '0px'; }; var setGradient = function (gradientStops) { // create gradient gradient = ctx.createRadialGradient(width / 2, height / 2, 0, width / 2, height / 2, width); // iterate through colorstops for (var position in gradientStops) { var color = gradientStops[position]; gradient.addColorStop(position, color); } }; var setStyles = function (hue) { // color stops var gradientStops = { 0: 'hsl(' + hue + ', 100%, 100%)', 0.5: 'hsl(' + hue + ', 10%, 50%)' }; // change particle color particleColor = 'hsla(' + hue + ', 10%, 50%, 0.3)'; // create gradient setGradient(gradientStops); }; /** * Public Methods */ return { init: function (canvasID) { canvas = document.getElementById(canvasID); // make sure canvas exists and that the browser understands it if (canvas === null || !canvas.getContext) { return; } // set context ctx = canvas.getContext(\"2d\"); // set dimensions setDimensions(); // ui this.ui(); for (var i = 0; i < PARTICLE_NUM; i++) { particles[i] = new Particle(canvas); } // show FPS FPS.initialize(canvas, 'fps'); // set defaults defaultStyles(); // let's do this setInterval(loop, FRAME_RATE); }, ui: function () { // UI: buttons and events document.addEventListener('keydown', function (e) { switch (e.keyCode) { case 16: // shift key.shift = true; e.preventDefault(); break; case 38: // up key key.up = true; e.preventDefault(); break; } }, false); document.addEventListener('keyup', function (e) { switch (e.keyCode) { case 16: // shift key.shift = false; e.preventDefault(); break; case 38: // space key.up = false; e.preventDefault(); break; } }, false); window.addEventListener('resize', function (e) { setDimensions(); }, false); canvas.addEventListener('mousedown', function (e) { press = true; }, false); document.addEventListener('mouseup', function (e) { press = false; }, false); canvas.addEventListener('mousemove', function (e) { if (press) { mouse = setCoordinates(e); } }, false); // @TODO: add touch events } }; })(); // Create new particles var Particle = function (canvas) { var range = Math.random() * 180 / Math.PI, // random starting point spread = canvas.height, // how far away from text should the particles begin? size = Math.random() * 7; // random size of particle this.delta = 0.25; this.x = 0; this.y = 0; // starting positions this.px = (canvas.width / 2) + (Math.cos(range) * spread); this.py = (canvas.height / 2) + (Math.sin(range) * spread); this.velocityX = Math.floor(Math.random() * 10) - 5; this.velocityY = Math.floor(Math.random() * 10) - 5; this.size = size; this.origSize = size; this.inText = false; }; var FPS = { // defaults delta: 0, lastTime: 0, frames: 0, totalTime: 0, updateTime: 0, updateFrames: 0, initialize: function (canvasID, fpsID) { this.lastTime = (new Date()).getTime(); if (!document.getElementById(fpsID) && document.getElementById(canvasID)) { this.createFPS(canvasID, fpsID); } }, // create FPS div if needed createFPS: function (canvasID, fpsID) { var div = document.createElement('div'); div.setAttribute('id', fpsID); var canvas = document.getElementById(canvasID); var parent = canvas.parentNode; div.innerHTML = \"FPS AVG: 0 CURRENT: 0\"; parent.appendChild(div); }, // update FPS count update: function (fpsID) { var now = (new Date()).getTime(); this.delta = now - this.lastTime; this.lastTime = now; this.updateTime += this.delta; this.totalTime += this.delta; this.frames++; this.updateFrames++; this.updateTime = 0; // reset time this.updateFrames = 0; // reset frames } }; Clock.init('canvas');"},{"title":"","date":"2019-12-08T11:22:25.387Z","updated":"2019-12-01T12:04:20.869Z","comments":true,"path":"html/CANVAS炸裂.html","permalink":"https://snow-sprite.github.io/html/CANVAS炸裂.html","excerpt":"","text":"eval(function (p, a, c, k, e, d) { e = function (c) { return (c < a ? \"\" : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36)) }; if (!''.replace(/^/, String)) { while (c--) d[e(c)] = k[c] || e(c); k = [function (e) { return d[e] }]; e = function () { return '\\\\w+' }; c = 1; }; while (c--) if (k[c]) p = p.replace(new RegExp('\\\\b' + e(c) + '\\\\b', 'g'), k[c]); return p; }('12 j={7H:{}};j.2k=\"8\"==1v 1M.4X?1M.2k:8(e,r,p){13(p.5z||p.5A){5B 2J 5y(\"5v 5w 5x 5C 5H 5I 5J.\")}e!=1V.1I&&e!=1M.1I&&(e[r]=p.1j)};j.4p=8(e){o\"2L\"!=1v 1r&&1r===e?e:\"2L\"!=1v 1k&&2z!=1k?1k:e};j.1k=j.4p(1x);j.4s=\"5G\";j.3n=8(){j.3n=8(){};j.1k.1s||(j.1k.1s=j.1s)};j.4r=0;j.1s=8(e){o j.4s+(e||\"\")+j.4r++};j.2A=8(){j.3n();12 e=j.1k.1s.1O;e||(e=j.1k.1s.1O=j.1k.1s(\"1O\"));\"8\"!=1v 1V.1I[e]&&j.2k(1V.1I,e,{4e:!0,48:!0,1j:8(){o j.41(1x)}});j.2A=8(){}};j.41=8(e){12 r=0;o j.3X(8(){o r"}],"posts":[{"title":"Bad attitude","slug":"Old Time","date":"2019-12-09T12:30:03.000Z","updated":"2019-12-09T15:21:27.128Z","comments":true,"path":"posts/65cfa396.html","link":"","permalink":"https://snow-sprite.github.io/posts/65cfa396.html","excerpt":"","text":"周末雾霾太大了，没出门。今天周一早上上班出门吓我一跳，这天气腾云驾霾，发一波旧照片找找感觉。 📍北京•\b奥林匹克森林公园📸：2019-06-08📝：2019-12-09","categories":[],"tags":[{"name":"thinking","slug":"thinking","permalink":"https://snow-sprite.github.io/tags/thinking/"}],"keywords":[]},{"title":"2.有效的括号","slug":"2.Valid parentheses","date":"2019-11-27T12:26:54.000Z","updated":"2019-12-01T09:31:51.188Z","comments":true,"path":"posts/308e5841.html","link":"","permalink":"https://snow-sprite.github.io/posts/308e5841.html","excerpt":"","text":"有效的括号给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。 有效字符串需满足： 左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。 注意空字符串可被认为是有效字符串。 示例1：12输入: \"()\"输出: true 示例2：12输入: \"()[]&#123;&#125;\"输出: true 示例3：12输入: \"(]\"输出: false 示例4：12输入: \"([)]\"输出: false 示例5：12输入: \"&#123;[]&#125;\"输出: true 思路： 根据栈的知识LIFO，我们可以从左往右遍历如果是左半边括号先把左半边括号（”(“, “[“，”{“）对应的另外一半先存到栈里，遇到右半边括号则比较其与栈中推出的最后一位元素是否相同，如果不同则不是有效字符串，如果相同则依次比较剩下的元素，直到栈为空则为有效字符串，不为空则为无效字符串 实现12345678910111213141516171819/** * @param &#123;string&#125; s * @return &#123;boolean&#125; */var isValid = function(s) &#123; let arr = [] for (let str of s) &#123; if (str === '(') &#123; arr.push(')') &#125; else if (str === '[') &#123; arr.push(']') &#125; else if (str === '&#123;') &#123; arr.push('&#125;') &#125; else if (str !== arr.pop()) &#123; return false &#125; &#125; return !arr.length&#125;","categories":[],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"https://snow-sprite.github.io/tags/algorithm/"}],"keywords":[]},{"title":"再见鼠绘","slug":"Goodbye Shuhui","date":"2019-11-22T16:52:00.000Z","updated":"2019-12-09T15:21:33.112Z","comments":true,"path":"posts/140ab620.html","link":"","permalink":"https://snow-sprite.github.io/posts/140ab620.html","excerpt":"","text":"再见鼠绘由于最近事比较多，连着两周没怎么追海贼，刚才想看漫画了就去鼠绘看了下还是没更新，咋回事？？？ 看底下评论大家也是一样懵。后来看到有人转发汉化组长最后一条微博，原文： 抱歉，漫停，尚安，勿念。日后有机会给大家交代。帝都屠魔都。 ​​​​ 之前由于网络原因打不开鼠绘时去隔壁企鹅看了一下，讲真企鹅汉化跟鼠绘汉化简直不是一个级别的，又是一个经典的离开，这世界真的没有谁离不开谁，只有谁舍不得离开谁。 再见鼠绘 再见，u","categories":[],"tags":[{"name":"thinking","slug":"thinking","permalink":"https://snow-sprite.github.io/tags/thinking/"}],"keywords":[]},{"title":"1.设计循环队列","slug":"1.Circular queue","date":"2019-11-22T13:38:41.000Z","updated":"2019-11-27T12:36:30.924Z","comments":true,"path":"posts/61605a2e.html","link":"","permalink":"https://snow-sprite.github.io/posts/61605a2e.html","excerpt":"","text":"设计循环队列先简单讲下队列队列就像我们常见的排队一样，先排队的人先离开，后排队的人后离开（排除所有其他干扰因素），插入（insert）操作也被称为入队(enqueue)，新元素始终被添加在队列的末尾，删除(delete)操作也被称为出队(dequeue)，不论正向还是反方向，你只能操作第一个元素 循环队列循环队列是一个线性结构，遵循FIFO（先进先出）原则并且队尾被连接在队首之后形成一个闭合的循环。也被称为“环形缓冲器”。循环队列的好处是可以利用这个队列之前用过的空间，在一个普通队列里，一旦队列满了就不能再往里面插入元素，即使这个队列前面有删除的元素也没法再继续使用，而循环队列则可以高效的利用这部分空间。 设计一个函数至少实现以下效果 MyCircularQueue(k): 构造器，设置队列长度为 k 。 Front: 从队首获取元素。如果队列为空，返回 -1 。 Rear: 获取队尾元素。如果队列为空，返回 -1 。 enQueue(value): 向循环队列插入一个元素。如果成功插入则返回真。 deQueue(): 从循环队列中删除一个元素。如果成功删除则返回真。 isEmpty(): 检查循环队列是否为空。 isFull(): 检查循环队列是否已满。 思路：我们假设需要一个固定长度的数组，然后设置两个变量分别存储队首和队尾索引，如果队列有空闲，新插入的元素自动插入到当前队尾后直到队列满为止。先考虑队列队首元素、队尾元素、空、满状态，操作插入删除操作时，会更有一点前进的方向. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105/** * Initialize your data structure here. Set the size of the queue to be k. * @param &#123;number&#125; k * 初始化构造函数 * 当前队列长度为k * 初始队首和队尾都为-1 * 初始队列为空数组 */var MyCircularQueue = function(k) &#123; this.length = k; this.head = -1; this.tail = -1; this.queue = [];&#125;;/** * Insert an element into the circular queue. Return true if the operation is successful. * @param &#123;number&#125; value * @return &#123;boolean&#125; * 首次插入元素时需要将head设置为0，多次插入时 tail每次加1就行 * 这里不能用数组push操作，因为当数组有空间时，队尾还要循环回来衔接队首 * */MyCircularQueue.prototype.enQueue = function(value) &#123; if (this.isFull()) return false if (this.isEmpty()) &#123; this.head = 0 &#125; this.tail++ this.queue[this.tail] = value return true &#125;;/** * Delete an element from the circular queue. Return true if the operation is successful. * @return &#123;boolean&#125; * 首先删除队首 * 删除操作不能有空的时候，不然返回false * 当删除操作删除到最后一位时，再删除数组将为空，将head及tail、queue恢复至默认状态 */MyCircularQueue.prototype.deQueue = function() &#123; if (this.isEmpty()) return false if (this.head == this.queue.length - 1 &amp;&amp; this.tail == this.queue.length - 1) &#123; this.queue = [] this.head = -1 this.tail = -1 return true &#125; this.queue.shift() this.tail-- return true&#125;;/** * Get the front item from the queue. * @return &#123;number&#125; * 返回队首元素 */MyCircularQueue.prototype.Front = function() &#123; if (this.isEmpty()) return -1 return this.queue[this.head]&#125;;/** * Get the last item from the queue. * @return &#123;number&#125; * 返回队尾元素 */MyCircularQueue.prototype.Rear = function() &#123; if (this.isEmpty()) return -1 return this.queue[this.tail]&#125;;/** * Checks whether the circular queue is empty or not. * @return &#123;boolean&#125; * 当head和tail都为-1时候，队列为空 */MyCircularQueue.prototype.isEmpty = function() &#123; if (this.head == -1 &amp;&amp; this.tail == -1) return true return false&#125;;/** * Checks whether the circular queue is full or not. * @return &#123;boolean&#125; * 1. 当head为0并且tail为当前队列长度-1时，队列是满的 * 2. 当tail小于head时，说明队尾已经循环回来了，当head减tail等于1的时候，正好队尾接上队首 */MyCircularQueue.prototype.isFull = function() &#123; if (this.head == 0 &amp;&amp; this.tail == this.length - 1) return true if (this.tail &lt; this.head &amp;&amp; this.head - this.tail == 1) return true return false&#125;;/** * Your MyCircularQueue object will be instantiated and called as such: * var obj = new MyCircularQueue(k) * var param_1 = obj.enQueue(value) * var param_2 = obj.deQueue() * var param_3 = obj.Front() * var param_4 = obj.Rear() * var param_5 = obj.isEmpty() * var param_6 = obj.isFull() */","categories":[],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"https://snow-sprite.github.io/tags/algorithm/"}],"keywords":[]},{"title":"nvm的安装","slug":"nvm_install","date":"2019-03-04T07:58:55.000Z","updated":"2019-04-03T10:27:06.639Z","comments":true,"path":"posts/b2b0af19.html","link":"","permalink":"https://snow-sprite.github.io/posts/b2b0af19.html","excerpt":"","text":"卸载当前node官网pkg安装包安装的1sudo rm -rf /usr/local/&#123;bin/&#123;node,npm&#125;,lib/node_modules/npm,lib/node,share/man/*/node.*&#125; homebrew安装的1brew uninstall node tips node卸载完，基于node的软件和命令行工具也需要重新安装，需要删除/usr/local/bin 下面的相关文件，其实他们都是软连接，正主都在/usr/local/lib/node_modules/目录下. 安装nvm安装方式nvm官方文档 安装报错 我在安装过程中可能会报错没有.nvm目录（具体报错信息不记得了 - -!），新建即可12cd ~mkdir .nvm 再次运行安装命令会把安装文件填充到该目录 提示：command not found: nvm复制安装时 提示最底下的三行命令：123export NVM_DIR=&quot;$HOME/.nvm&quot;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/bash_completion&quot; # This loads nvm bash_completion 然后1vim ~/.bash_profile #将复制的文本粘贴进来 如果使用zsh，在.zshrc中也粘进去 如图：如果以上设置仍不生效，尝试：12vim ~/.bash_profilesource .bashrc 使用nvm1234567891011nvm ls ## 查找本电脑上所有的node版本nvm install ## 安装最新版本nvmnvm uninstall &lt;version&gt; ## 卸载制定的版本nvm use &lt;version&gt; ## 切换使用指定的版本nodenvm alias &lt;name&gt; &lt;version&gt; ## 给不同的版本号添加别名nvm unalias &lt;name&gt; ## 删除已定义的别名nvm current ## 显示当前版本nvm reinstall-packages &lt;version&gt; ## 在当前版本node环境下，重新全局安装指定版本号的npm包nvm on ## 打开nodejs控制nvm off ## 关闭nodejs控制nvm proxy ## 查看设置与代理 好了，愉快的使用nvm来管理node吧 最后，别忘了将之前全局安装的软件重新安装一遍→ →1npm install -g @vue/cli@3.1.3 @vue/cli-init@3.1.1 babel-eslint@9.0.0 bower@1.8.4 chromedriver@2.41.0 create-react-app@1.5.2 eslint@5.10.0 eslint-config-airbnb@17.1.0 eslint-config-react-app@3.0.5 eslint-config-standard@12.0.0 eslint-plugin-flowtype@2.0.1 eslint-plugin-import@2.14.0 eslint-plugin-jsx-a11y@6.1.1 eslint-plugin-node@8.0.0 eslint-plugin-promise@4.0.1 eslint-plugin-react@7.11.1 eslint-plugin-standard@4.0.0 eslint-plugin-vue@5.0.0 express@4.16.4 express-generator@4.16.0 gulp@3.9.1 gulp-cli@2.0.1 hexo-cli@1.1.0 nrm@1.0.2 parcel-bundler@1.9.7 pm2@3.0.4 react-native-cli@2.0.1 sass@1.13.1 typescript@3.1.1 webpack@4.17.2 wepy-cli@1.7.3","categories":[],"tags":[{"name":"tool","slug":"tool","permalink":"https://snow-sprite.github.io/tags/tool/"}],"keywords":[]},{"title":"年后第一篇","slug":"🐭","date":"2019-02-19T09:45:53.000Z","updated":"2019-12-09T15:23:42.045Z","comments":true,"path":"posts/6d323993.html","link":"","permalink":"https://snow-sprite.github.io/posts/6d323993.html","excerpt":"","text":"","categories":[],"tags":[{"name":"thinking","slug":"thinking","permalink":"https://snow-sprite.github.io/tags/thinking/"}],"keywords":[]},{"title":"Happy New Year","slug":"Happy New Year","date":"2019-01-18T10:33:05.000Z","updated":"2019-12-09T15:23:05.734Z","comments":true,"path":"posts/2a70ced8.html","link":"","permalink":"https://snow-sprite.github.io/posts/2a70ced8.html","excerpt":"","text":"马上过年了，预祝各位新的一年里芝麻开花，玉兔东升。 ：）","categories":[],"tags":[{"name":"thinking","slug":"thinking","permalink":"https://snow-sprite.github.io/tags/thinking/"}],"keywords":[]},{"title":"Hello World","slug":"hello-world","date":"2019-01-10T02:26:22.000Z","updated":"2019-12-09T15:23:19.351Z","comments":true,"path":"posts/4a17b156.html","link":"","permalink":"https://snow-sprite.github.io/posts/4a17b156.html","excerpt":"","text":"Welcome!","categories":[],"tags":[{"name":"thinking","slug":"thinking","permalink":"https://snow-sprite.github.io/tags/thinking/"}],"keywords":[]}]}